secrets:
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  secret_key:
    file: ./secrets/secret_key.txt
  stripe_secret_key:
    file: ./secrets/stripe_secret_key.txt
  stripe_webhook_secret:
    file: ./secrets/stripe_webhook_secret.txt
  sentry_dsn:
    file: ./secrets/sentry_dsn.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
  django_superuser_password:
    file: ./secrets/django_superuser_password.txt

services:
  # Database Services
  postgres:
    image: postgres:16-alpine
    container_name: valund_postgres
    environment:
      POSTGRES_DB: valund
      POSTGRES_USER: valund_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256 --auth-local=scram-sha-256
    secrets:
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U valund_user -d valund"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - backend_network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  pgbouncer:
    image: pgbouncer/pgbouncer:1.21.0
    container_name: valund_pgbouncer
    environment:
      DATABASES_HOST: postgres
      DATABASES_PORT: 5432
      DATABASES_USER: valund_user
      DATABASES_PASSWORD_FILE: /run/secrets/db_password
      DATABASES_DBNAME: valund
      POOL_MODE: transaction
      SERVER_RESET_QUERY: DISCARD ALL
      MAX_CLIENT_CONN: 100
      DEFAULT_POOL_SIZE: 20
      MIN_POOL_SIZE: 5
      RESERVE_POOL_SIZE: 3
      SERVER_LIFETIME: 3600
      SERVER_IDLE_TIMEOUT: 600
      LOG_CONNECTIONS: 1
      LOG_DISCONNECTIONS: 1
    secrets:
      - db_password
    ports:
      - "6432:5432"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend_network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    restart: unless-stopped

  # Cache and Message Broker
  redis:
    image: redis:7.2-alpine
    container_name: valund_redis
    command: >
      sh -c "redis-server
      --requirepass $$(cat /run/secrets/redis_password)
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --timeout 300
      --tcp-keepalive 60"
    secrets:
      - redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli --no-auth-warning -a $$(cat /run/secrets/redis_password) ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend_network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    restart: unless-stopped

  # Backend Services
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
      cache_from:
        - valund_backend:latest
    image: valund_backend:latest
    container_name: valund_backend
    environment:
      - ENVIRONMENT=production
      - DEBUG=${DEBUG:-0}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,backend,nginx}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY:-}
      - RUN_MIGRATIONS=${RUN_MIGRATIONS:-1}
      - COLLECT_STATIC=${COLLECT_STATIC:-1}
      - CREATE_SUPERUSER=${CREATE_SUPERUSER:-0}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME:-}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL:-}
    secrets:
      - source: db_password
        target: db_password
      - source: redis_password
        target: redis_password
      - source: secret_key
        target: secret_key
      - source: stripe_secret_key
        target: stripe_secret_key
      - source: stripe_webhook_secret
        target: stripe_webhook_secret
      - source: sentry_dsn
        target: sentry_dsn
      - source: django_superuser_password
        target: django_superuser_password
    volumes:
      - ${BACKEND_VOLUME:-backend_code}:/app:${VOLUME_MODE:-ro}
      - media_volume:/app/media
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      pgbouncer:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - backend_network
      - frontend_network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:size=100M,noexec,nosuid,nodev
      - /app/logs:size=50M,noexec,nosuid,nodev
      - /dev/shm:size=64M,noexec,nosuid,nodev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery Workers
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    image: valund_backend:latest
    container_name: valund_celery_worker
    environment:
      - ENVIRONMENT=production
      - DEBUG=${DEBUG:-0}
      - C_FORCE_ROOT=1
    secrets:
      - source: db_password
        target: db_password
      - source: redis_password
        target: redis_password
      - source: secret_key
        target: secret_key
    volumes:
      - ${BACKEND_VOLUME:-backend_code}:/app:${VOLUME_MODE:-ro}
      - media_volume:/app/media
    depends_on:
      - backend
      - redis
    networks:
      - backend_network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:size=100M,noexec,nosuid,nodev
      - /app/logs:size=50M,noexec,nosuid,nodev
    restart: unless-stopped
    command: ["/usr/local/bin/load-secrets.sh", "celery", "-A", "valund", "worker", "-l", "info", "--without-gossip", "--without-mingle", "--without-heartbeat"]

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    image: valund_backend:latest
    container_name: valund_celery_beat
    environment:
      - ENVIRONMENT=production
      - DEBUG=${DEBUG:-0}
      - C_FORCE_ROOT=1
    secrets:
      - source: db_password
        target: db_password
      - source: redis_password
        target: redis_password
      - source: secret_key
        target: secret_key
    volumes:
      - ${BACKEND_VOLUME:-backend_code}:/app:${VOLUME_MODE:-ro}
      - celery_beat:/app/celerybeat-schedule
    depends_on:
      - backend
      - redis
    networks:
      - backend_network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:size=50M,noexec,nosuid,nodev
      - /app/logs:size=50M,noexec,nosuid,nodev
    restart: unless-stopped
    command: ["/usr/local/bin/load-secrets.sh", "celery", "-A", "valund", "beat", "-l", "info", "--schedule=/app/celerybeat-schedule/celerybeat-schedule"]

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${FRONTEND_BUILD_TARGET:-production}
    container_name: valund_frontend
    environment:
      - VITE_API_URL=${VITE_API_URL:-http://localhost/api}
      - VITE_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY:-}
    volumes:
      - ${FRONTEND_VOLUME:-frontend_dist}:/app/dist
    ports:
      - "3000:3000"
    networks:
      - frontend_network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    restart: unless-stopped

  # Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: valund_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_volume:/static:ro
      - media_volume:/media:ro
      - frontend_dist:/frontend:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - frontend_network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    read_only: true
    tmpfs:
      - /var/cache/nginx:size=50M,noexec,nosuid,nodev
      - /var/run:size=10M,noexec,nosuid,nodev
      - /tmp:size=50M,noexec,nosuid,nodev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Services
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: valund_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring_network
      - backend_network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "65534:65534"
    read_only: true
    tmpfs:
      - /tmp:size=100M,noexec,nosuid,nodev
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'

  grafana:
    image: grafana/grafana:10.1.2
    container_name: valund_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    secrets:
      - grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - monitoring_network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "472:0"
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  frontend_dist:
    driver: local
  backend_code:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  celery_beat:
    driver: local

networks:
  frontend_network:
    driver: bridge
  backend_network:
    driver: bridge
    internal: true
  monitoring_network:
    driver: bridge
    internal: true
