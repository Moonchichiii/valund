[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "valund"
version = "1.0.0"
description = "Enterprise competence marketplace platform"
readme = "README.md"
license = {text = "Proprietary"}
authors = [
    {name = "Valund Team", email = "dev@valund.com"}
]
maintainers = [
    {name = "Valund Team", email = "dev@valund.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: Other/Proprietary License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Django :: 5.0",
    "Environment :: Web Environment",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.11"
dependencies = [
    # Core Django & API - exact versions from requirements.txt
    "Django==5.0.2",
    "djangorestframework==3.14.0",
    "django-cors-headers==4.3.1",
    "django-environ==0.11.2",
    "django-extensions==3.2.3",

    # Database & ORM
    "psycopg2-binary==2.9.9",
    "redis==5.0.1",

    # Authentication & Security
    "djangorestframework-simplejwt==5.3.0",
    "django-allauth==0.61.1",
    "cryptography==42.0.2",

    # Background Tasks
    "celery==5.3.6",
    "django-celery-beat==2.5.0",
    "django-celery-results==2.5.1",

    # File Handling & Storage
    "Pillow==10.2.0",
    "django-storages==1.14.2",
    "boto3==1.34.51",

    # Payments
    "stripe==8.2.0",

    # Monitoring & Logging
    "sentry-sdk[django]==1.40.6",
    "prometheus-client==0.20.0",
    "django-prometheus==2.3.1",

    # API Documentation
    "drf-spectacular==0.27.1",

    # Environment & Configuration
    "python-decouple==3.8",

    # Utilities
    "requests==2.31.0",
    "celery-progress==0.3",

    # Search & Text Processing
    "django-haystack==3.2.1",
    "elasticsearch==8.12.1",

    # Performance
    "gunicorn==21.2.0",
    "uvicorn[standard]==0.27.1",
]

[project.optional-dependencies]
# Testing dependencies - exact versions from requirements.txt
test = [
    "pytest==8.0.2",
    "pytest-django==4.8.0",
    "pytest-cov==4.0.0",
    "pytest-mock==3.12.0",
    "factory-boy==3.3.0",
    "faker==22.6.0",
]

# Code quality tools - enterprise grade, conflict-free
quality = [
    "black==24.1.1",           # Code formatting
    "ruff==0.2.1",             # Fast linting (replaces flake8, isort, etc.)
    "mypy==1.8.0",             # Type checking
    "django-stubs==4.2.7",     # Django type stubs
    "types-requests==2.31.0.20240125",  # Request types
]

# Debug toolbar for local development only
debug = [
    "django-debug-toolbar==4.2.0",
]

[project.urls]
Homepage = "https://valund.com"
Documentation = "https://docs.valund.com"
Repository = "https://github.com/yourusername/valund"
"Bug Reports" = "https://github.com/yourusername/valund/issues"
Changelog = "https://github.com/yourusername/valund/blob/main/CHANGELOG.md"

[project.scripts]
valund-manage = "backend.manage:main"

# ==============================================================================
# TOOL CONFIGURATIONS
# ==============================================================================

[tool.setuptools]
packages = ["backend", "frontend"]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json", "*.html", "*.css", "*.js"]

# Black Configuration - minimal, production-focused
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.venv
  | build
  | dist
  | migrations
  | node_modules
  | static
  | media
)/
'''

# isort Configuration - minimal
[tool.isort]
profile = "black"
line_length = 88
skip_glob = ["*/migrations/*", "*/venv/*", "*/node_modules/*"]
known_django = "django"
known_first_party = ["backend"]

# Pytest Configuration - production testing focus
[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "backend.settings.testing"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
addopts = [
    "--strict-markers",
    "--verbose",
    "--tb=short",
    "--cov=backend",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "--reuse-db",
]
testpaths = ["backend/tests"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage Configuration
[tool.coverage.run]
source = ["backend"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "manage.py",
    "*/settings/*",
    "*/wsgi.py",
    "*/asgi.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
show_missing = true
